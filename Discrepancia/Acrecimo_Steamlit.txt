# Para abrir:
# Digite no terminal: & "C:\Adegax\Ci√™ncia de dados - ADEGAS\5¬∫ semestre\Minera√ß√£o de dados\.venv\Scripts\Activate.ps1"
# Depois quando estiver no (.venv) digite: streamlit run streamlit_app.py

import streamlit as st
from PIL import Image
import os
import tempfile

from face_utils import get_embeddings, calculate_distance
from attribute_detector import detect_attributes
from evaluator import avaliar_discrepancia

st.set_page_config(page_title="Analisador de Discrep√¢ncia Facial", layout="centered")

st.title("üì∏ Analisador de Discrep√¢ncia entre RG e Selfie")

st.markdown("Envie a foto do RG e uma selfie atual para verificar se voc√™ precisa atualizar a foto no documento ou remover acess√≥rios.")

# Uploads
rg_image = st.file_uploader("üìÑ Envie a imagem do RG", type=["jpg", "jpeg", "png"])
selfie_image = st.file_uploader("ü§≥ Envie sua selfie atual", type=["jpg", "jpeg", "png"])

if rg_image and selfie_image:
    with tempfile.TemporaryDirectory() as tmpdir:
        rg_path = os.path.join(tmpdir, "rg.jpg")
        selfie_path = os.path.join(tmpdir, "selfie.jpg")

        # Salva os arquivos temporariamente
        with open(rg_path, "wb") as f:
            f.write(rg_image.read())
        with open(selfie_path, "wb") as f:
            f.write(selfie_image.read())

        # Tenta abrir e tratar as imagens com PIL
        try:
            image_rg = Image.open(rg_path).convert("RGB").resize((300, 300))
            image_selfie = Image.open(selfie_path).convert("RGB").resize((300, 300))

            # Exibe as imagens tratadas
            st.image([image_rg, image_selfie], caption=["Imagem do RG", "Selfie atual"], width=250)

        except Exception as e:
            st.error(f"Erro ao abrir as imagens com PIL: {str(e)}")
            st.stop()

        try:
            # Embeddings
            emb_rg = get_embeddings(rg_path)
            emb_selfie = get_embeddings(selfie_path)

            # C√°lculo da dist√¢ncia facial
            distancia = calculate_distance(emb_rg, emb_selfie)

            # Detec√ß√£o de atributos na selfie
            atributos = detect_attributes(selfie_path)

            # Gera√ß√£o da recomenda√ß√£o
            recomendacao = avaliar_discrepancia(distancia, atributos)

            st.markdown("### Resultado da An√°lise")
            st.write(f"**Dist√¢ncia facial**: `{distancia:.4f}`")
            st.write(f"**Acess√≥rios detectados**: `{atributos}`")
            st.success(f"**Recomenda√ß√£o**: {recomendacao}")

        except Exception as e:
            st.error(f"Erro na an√°lise: {str(e)}")

else:
    st.info("Por favor, envie as duas imagens para iniciar a an√°lise.")
